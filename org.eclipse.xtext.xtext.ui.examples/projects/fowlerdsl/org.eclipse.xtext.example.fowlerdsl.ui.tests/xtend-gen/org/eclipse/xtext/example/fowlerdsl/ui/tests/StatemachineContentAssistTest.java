/**
 * Copyright (c) 2018, 2024 itemis AG (http://www.itemis.eu) and others.
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * SPDX-License-Identifier: EPL-2.0
 */
package org.eclipse.xtext.example.fowlerdsl.ui.tests;

import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.ui.testing.AbstractContentAssistTest;
import org.eclipse.xtext.ui.testing.util.IResourcesSetupUtil;
import org.junit.Test;
import org.junit.runner.RunWith;

/**
 * @author miklossy - Initial contribution and API
 */
@RunWith(XtextRunner.class)
@InjectWith(StatemachineUiInjectorProvider.class)
@SuppressWarnings("all")
public class StatemachineContentAssistTest extends AbstractContentAssistTest {
  @Test
  public void empty() throws Exception {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(this.c);
    _builder.newLineIfNotEmpty();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("resetEvents");
    _builder_1.newLine();
    this.assertContentAssistant(_builder, 
      new String[] { "commands", "events", "resetEvents", "state" }, "resetEvents", _builder_1.toString());
  }

  @Test
  public void statemachine_resetEvents() throws Exception {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("events");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("doorClosed   D1CL");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("drawerOpened D2OP");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("lightOn      L1ON");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("doorOpened   D1OP");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("panelClosed  PNCL");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    _builder.newLine();
    _builder.append("resetEvents");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(this.c, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("end");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("events");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("doorClosed   D1CL");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("drawerOpened D2OP");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("lightOn      L1ON");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("doorOpened   D1OP");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("panelClosed  PNCL");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("resetEvents");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("doorOpened");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    this.assertContentAssistant(_builder, 
      new String[] { "doorClosed", "drawerOpened", "lightOn", "doorOpened", "panelClosed" }, "doorOpened", _builder_1.toString());
  }

  @Test
  public void state_actions() throws Exception {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("commands");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("unlockPanel PNUL");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("lockPanel   NLK");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("lockDoor    D1LK");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("unlockDoor  D1UL");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    _builder.newLine();
    _builder.append("state idle");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("actions {");
    _builder.append(this.c, "\t");
    _builder.append("}");
    _builder.newLineIfNotEmpty();
    _builder.append("end");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("commands");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("unlockPanel PNUL");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("lockPanel   NLK");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("lockDoor    D1LK");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("unlockDoor  D1UL");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("state idle");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("actions {unlockDoor}");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    this.assertContentAssistant(_builder, 
      new String[] { "unlockPanel", "lockPanel", "lockDoor", "unlockDoor", "{" }, "unlockDoor", _builder_1.toString());
  }

  @Test
  public void transition_event() throws Exception {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("events");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("doorClosed   D1CL");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("drawerOpened D2OP");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("lightOn      L1ON");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("doorOpened   D1OP");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("panelClosed  PNCL");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    _builder.newLine();
    _builder.append("resetEvents");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("doorOpened doorClosed");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    _builder.newLine();
    _builder.append("commands");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("unlockPanel PNUL");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("lockPanel   NLK");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("lockDoor    D1LK");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("unlockDoor  D1UL");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    _builder.newLine();
    _builder.append("state idle");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("actions {unlockDoor lockPanel}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(this.c, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("end");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("events");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("doorClosed   D1CL");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("drawerOpened D2OP");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("lightOn      L1ON");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("doorOpened   D1OP");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("panelClosed  PNCL");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("resetEvents");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("doorOpened doorClosed");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("commands");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("unlockPanel PNUL");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("lockPanel   NLK");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("lockDoor    D1LK");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("unlockDoor  D1UL");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("state idle");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("actions {unlockDoor lockPanel}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("doorClosed");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    this.assertContentAssistant(_builder, 
      new String[] { "Transition - Template for a Transition", "doorClosed", "drawerOpened", "lightOn", "doorOpened", "panelClosed", "end" }, "doorClosed", _builder_1.toString());
  }

  @Test
  public void transition_state() throws Exception {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("events");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("doorClosed   D1CL");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("drawerOpened D2OP");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("lightOn      L1ON");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("doorOpened   D1OP");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("panelClosed  PNCL");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    _builder.newLine();
    _builder.append("resetEvents");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("doorOpened doorClosed");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    _builder.newLine();
    _builder.append("commands");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("unlockPanel PNUL");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("lockPanel   NLK");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("lockDoor    D1LK");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("unlockDoor  D1UL");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    _builder.newLine();
    _builder.append("state idle");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("actions {unlockDoor lockPanel}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("doorClosed => active");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    _builder.newLine();
    _builder.append("state active");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("drawerOpened => waitingForLight");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("lightOn      => waitingForDrawer");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    _builder.newLine();
    _builder.append("state waitingForLight");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("lightOn => unlockedPanel");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    _builder.newLine();
    _builder.append("state waitingForDrawer");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("drawerOpened => unlockedPanel");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    _builder.newLine();
    _builder.append("state unlockedPanel");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("actions {unlockPanel lockDoor}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("panelClosed => ");
    _builder.append(this.c, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("end");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("events");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("doorClosed   D1CL");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("drawerOpened D2OP");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("lightOn      L1ON");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("doorOpened   D1OP");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("panelClosed  PNCL");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("resetEvents");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("doorOpened doorClosed");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("commands");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("unlockPanel PNUL");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("lockPanel   NLK");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("lockDoor    D1LK");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("unlockDoor  D1UL");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("state idle");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("actions {unlockDoor lockPanel}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("doorClosed => active");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("state active");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("drawerOpened => waitingForLight");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("lightOn      => waitingForDrawer");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("state waitingForLight");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("lightOn => unlockedPanel");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("state waitingForDrawer");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("drawerOpened => unlockedPanel");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("state unlockedPanel");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("actions {unlockPanel lockDoor}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("panelClosed => idle");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    this.assertContentAssistant(_builder, 
      new String[] { "idle", "active", "waitingForLight", "waitingForDrawer", "unlockedPanel" }, "idle", _builder_1.toString());
  }

  @Test
  public void transition_template() throws Exception {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("events");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("doorClosed   D1CL");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("drawerOpened D2OP");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("lightOn      L1ON");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("doorOpened   D1OP");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("panelClosed  PNCL");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    _builder.newLine();
    _builder.append("state idle");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(this.c, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("end");
    _builder.newLine();
    _builder.newLine();
    _builder.append("state active");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("events");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("doorClosed   D1CL");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("drawerOpened D2OP");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("lightOn      L1ON");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("doorOpened   D1OP");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("panelClosed  PNCL");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("state idle");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("doorClosed => idle");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("state active");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    this.assertContentAssistant(_builder, 
      new String[] { "doorClosed", "drawerOpened", "lightOn", "doorOpened", "panelClosed", "actions", "end", "Transition - Template for a Transition" }, "Transition - Template for a Transition", _builder_1.toString());
  }

  @Test
  public void events_from_another_file() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("events");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("doorClosed   D1CL");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("drawerOpened D2OP");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("lightOn      L1ON");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("doorOpened   D1OP");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("panelClosed  PNCL");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    this.createDslFile("events", _builder);
    IResourcesSetupUtil.waitForBuild();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("resetEvents");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append(this.c, "\t");
    _builder_1.newLineIfNotEmpty();
    _builder_1.append("end");
    _builder_1.newLine();
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("doorClosed");
    _builder_2.newLine();
    _builder_2.append("drawerOpened");
    _builder_2.newLine();
    _builder_2.append("lightOn");
    _builder_2.newLine();
    _builder_2.append("doorOpened");
    _builder_2.newLine();
    _builder_2.append("panelClosed");
    _builder_2.newLine();
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("resetEvents");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("doorOpened");
    _builder_3.newLine();
    _builder_3.append("end");
    _builder_3.newLine();
    this.assertContentAssistant(_builder_1, _builder_2, "doorOpened", _builder_3.toString());
  }
}
